---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Window from "../../components/Window.svelte";
import TableOfContents from "@components/TableOfContents.astro";
import Kudos from "@components/Kudos.astro";
import TableOfContentsObserver from "@components/TableOfContentsObserver.svelte";

export async function getStaticPaths() {
	const posts = await getCollection("blog");
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { Content, headings } = await post.render();
const { title, description, pubDate, image, alt } = post.data;
const splitTitle = post.data.title.split(":");
---

<script>
	let globalInstanceIndex = 0;

	class HeadingAnchors extends HTMLElement {
		static register(tagName) {
			if ("customElements" in window) {
				if (customElements.get("heading-anchors")) return;
				customElements.define(tagName || "heading-anchors", HeadingAnchors);
			}
		}

		static attributes = {
			exclude: "data-ha-exclude",
			prefix: "prefix",
			content: "content",
		};

		static classes = {
			anchor: "ha",
			placeholder: "ha-placeholder",
			srOnly: "ha-visualhide",
		};

		static defaultSelector = "h2,h3,h4,h5,h6";

		static css = `
.${HeadingAnchors.classes.srOnly} {
	clip: rect(0 0 0 0);
	height: 1px;
	overflow: hidden;
	position: absolute;
	width: 1px;
}
.${HeadingAnchors.classes.anchor} {
	position: absolute;
	left: var(--ha_offsetx);
	top: var(--ha_offsety);
	text-decoration: none;
	opacity: 0;
}
.${HeadingAnchors.classes.placeholder} {
	opacity: .7;
}
.${HeadingAnchors.classes.anchor}:is(:focus-within, :hover) {
	opacity: 1;
}
.${HeadingAnchors.classes.anchor},
.${HeadingAnchors.classes.placeholder} {
	padding: 0 .25em;

	/* Disable selection of visually hidden label */
	-webkit-user-select: none;
	user-select: none;
}

@supports (anchor-name: none) {
	.${HeadingAnchors.classes.anchor} {
		position: absolute;
		left: anchor(left);
		top: anchor(top);
	}
}`;

		get supports() {
			return "replaceSync" in CSSStyleSheet.prototype;
		}

		get supportsAnchorPosition() {
			return CSS.supports("anchor-name: none");
		}

		constructor() {
			super();

			if (!this.supports) {
				return;
			}

			let sheet = new CSSStyleSheet();
			sheet.replaceSync(HeadingAnchors.css);
			document.adoptedStyleSheets = [...document.adoptedStyleSheets, sheet];

			this.headingStyles = {};
			this.instanceIndex = globalInstanceIndex++;
		}

		connectedCallback() {
			if (!this.supports) {
				return;
			}
			this.headings.forEach((heading, index) => {
				if (heading.querySelector(`.${HeadingAnchors.classes.placeholder}`))
					return;
				if (!heading.hasAttribute(HeadingAnchors.attributes.exclude)) {
					let anchor = this.getAnchorElement(heading);
					let placeholder = this.getPlaceholderElement();

					// Prefers anchor position approach for better accessibility
					// https://amberwilson.co.uk/blog/are-your-anchor-links-accessible/
					if (this.supportsAnchorPosition) {
						let anchorName = `--ha_${this.instanceIndex}_${index}`;
						placeholder.style.setProperty("anchor-name", anchorName);
						anchor.style.positionAnchor = anchorName;
					}

					heading.appendChild(placeholder);
					heading.after(anchor);
				}
			});
		}

		// Polyfill-only
		positionAnchorFromPlaceholder(placeholder) {
			if (!placeholder) {
				return;
			}

			let heading = placeholder.closest("h1,h2,h3,h4,h5,h6");
			if (!heading.nextElementSibling) {
				return;
			}

			// TODO next element could be more defensive
			this.positionAnchor(heading.nextElementSibling);
		}

		// Polyfill-only
		positionAnchor(anchor) {
			if (!anchor || !anchor.previousElementSibling) {
				return;
			}

			// TODO previous element could be more defensive
			let heading = anchor.previousElementSibling;
			this.setFontProp(heading, anchor);

			if (this.supportsAnchorPosition) {
				// quit early
				return;
			}

			let placeholder = heading.querySelector(
				`.${HeadingAnchors.classes.placeholder}`
			);
			if (placeholder) {
				anchor.style.setProperty("--ha_offsetx", `${placeholder.offsetLeft}px`);
				anchor.style.setProperty("--ha_offsety", `${placeholder.offsetTop}px`);
			}
		}

		setFontProp(heading, anchor) {
			let placeholder = heading.querySelector(
				`.${HeadingAnchors.classes.placeholder}`
			);
			if (placeholder) {
				let style = getComputedStyle(placeholder);
				let props = ["font-weight", "font-size", "line-height", "font-family"];
				let font = props.map((name) => style.getPropertyValue(name));
				anchor.style.setProperty(
					"font",
					`${font[0]} ${font[1]}/${font[2]} ${font[3]}`
				);
			}
		}

		getAccessibleTextPrefix() {
			// Useful for i18n
			return (
				this.getAttribute(HeadingAnchors.attributes.prefix) ||
				"Jump to section titled"
			);
		}

		getContent() {
			return this.getAttribute(HeadingAnchors.attributes.content) || "#";
		}

		getPlaceholderElement() {
			let ph = document.createElement("span");
			ph.setAttribute("aria-hidden", true);
			ph.classList.add(HeadingAnchors.classes.placeholder);
			ph.textContent = this.getContent();

			ph.addEventListener("mouseover", (e) => {
				let placeholder = e.target.closest(
					`.${HeadingAnchors.classes.placeholder}`
				);
				if (placeholder) {
					this.positionAnchorFromPlaceholder(placeholder);
				}
			});

			return ph;
		}

		getAnchorElement(heading) {
			let anchor = document.createElement("a");
			anchor.href = `#${heading.id}`;
			anchor.classList.add(HeadingAnchors.classes.anchor);

			let content = this.getContent();
			anchor.innerHTML = `<span class="${HeadingAnchors.classes.srOnly}">${this.getAccessibleTextPrefix()}: ${heading.textContent}</span><span aria-hidden="true">${content}</span>`;

			anchor.addEventListener("focus", (e) => {
				e.preventDefault();
				let anchor = e.target.closest(`.${HeadingAnchors.classes.anchor}`);
				anchor.previousElementSibling.scrollIntoView();
				anchor.focus({ preventScoll: true });
				if (anchor) {
					this.positionAnchor(anchor);
				}
			});

			anchor.addEventListener("mouseover", (e) => {
				// when CSS anchor positioning is supported, this is only used to set the font
				let anchor = e.target.closest(`.${HeadingAnchors.classes.anchor}`);
				this.positionAnchor(anchor);
			});

			anchor.addEventListener("mousedown", (e) => {
				let anchor = e.target.closest(`.${HeadingAnchors.classes.anchor}`);
				history.pushState(null, null, anchor.getAttribute("href"));
			});

			return anchor;
		}

		get headings() {
			return this.querySelectorAll(
				this.selector.split(",").map((entry) => `${entry.trim()}[id]`)
			);
		}

		get selector() {
			return this.getAttribute("selector") || HeadingAnchors.defaultSelector;
		}
	}

	document.addEventListener("astro:page-load", () => {
		HeadingAnchors.register();
	});
</script>

<Layout title={title} description={description} image={image} alt={alt}>
	<div class="layout__grid post">
		<div class="layout__cell post__toc">
			<Window
				title="Table of Contents"
				order={0}
				titleTag="h2"
				style="--max-width: 25rem; --block-start: 10rem; --inline-start: 0"
				client:load>
				<TableOfContents headings={headings} />
				<TableOfContentsObserver client:only="svelte" />
			</Window>
		</div>
		<div class="layout__cell post__content">
			<Window title="Post" order={1} titleTag="span" flex client:load>
				<article class="rte container post__main">
					<h1 class="text--base post__title">
						{
							splitTitle.length > 1 ? (
								<>
									<span class="post__title-pretitle h3">{splitTitle[0]}:</span>
									<span class="post__title-main h1">{splitTitle[1]}</span>
								</>
							) : (
								<span class="post__title-main h1">{title}</span>
							)
						}
					</h1>
					<div class="post__meta">
						<time class="post__date">
							{
								new Intl.DateTimeFormat("en-GB", {
									dateStyle: "long",
								}).format(new Date(pubDate))
							}
						</time>
						<Kudos offsetSparkles={true} />
					</div>
					<heading-anchors>
						<Content />
					</heading-anchors>
					<div class="post__footer-kudos">
						<Kudos />
					</div>
				</article>
			</Window>
		</div>
	</div>
</Layout>

<style lang="scss">
	.post__content {
		min-width: 0;
	}

	.post__title {
		margin: 1rem 0 1rem;
		line-height: 1;
	}

	.post__meta {
		display: flex;
		align-items: center;
		justify-content: space-between;
		border-block-end: var(--border-thickness) dashed var(--color-text-accent);
		margin-block-end: var(--space-xs);
	}

	.post__date {
		color: var(--color-text-heading);
		text-transform: uppercase;
	}

	.post__title:has(.post__title-pretitle) {
		margin: 0.75rem 0 1rem;
	}

	.post__title-main {
		display: block;
		filter: drop-shadow(0 -0.125rem 0 var(--color-accent-text-1))
			drop-shadow(0.125rem 0.125rem 0 var(--color-accent-text-2));
		background: linear-gradient(
			177deg,
			var(--color-text-heading) 50%,
			var(--color-text-subheading)
		);
		background-clip: text;
		color: transparent;
	}

	.post__main {
		:global(.rte) {
		}
	}

	.post__footer-kudos {
		margin-block-start: var(--space-s);
	}

	:global(.rss-only) {
		display: none;
	}

	:global(.quiz-results) {
		--border-color: var(--color-card-border);
		margin-block: var(--space-xs);
		padding: calc(var(--border-thickness) * 2) var(--space-2xs);
		background-color: var(--color-card-bg);
		color: var(--color-card-text);
		@include pixel-borders();

		:global(h2) {
			color: currentColor;
			margin: 0;
			border: 0;
			text-transform: uppercase;
		}
	}

	@media (min-width: 62em) {
		.post {
			grid-template-columns: 25rem 1fr;
			gap: var(--space-s);
		}
	}
</style>
