---
import { type CollectionEntry, getCollection } from "astro:content";
import { getWork } from "src/scripts/data";
import Layout from "@layouts/Layout.astro";
import Window from "@components/Window.svelte";
import WorkImage from "@components/WorkImage.astro";
import Work from "@components/Work.svelte";

export async function getStaticPaths() {
	const works = await getWork();
	const projects = [];
	works.forEach((work, index) => {
		const otherProjects = [];
		if (index === 0) {
			otherProjects.push(works[works.length - 1]);
		} else {
			otherProjects.push(works[index - 1]);
		}
		if (index === works.length - 1) {
			otherProjects.push(works[0]);
		} else {
			otherProjects.push(works[index + 1]);
		}

		projects.push({
			params: { slug: work.slug },
			props: { ...work, otherProjects },
		});
	});

	return projects;
}
const work = Astro.props;
const { Content } = await work.render();
const { title, excerpt, date, image, color, technology } = work.data;
---

<Layout title={title} description={excerpt}>
	<div class="layout__grid work">
		<div class="layout__cell work__content">
			<Window
				title="Case study"
				order={0}
				titleTag="span"
				style={`--background-color: ${color}; width: 100%; max-width:100%;`}
				client:load>
				<div class="rte work__container">
					<div class="work__hero-main">
						<h1 class="work__title">
							{title}
						</h1>
						<p class="h3 work__excerpt">{excerpt}</p>
						<ul class="work__tags">
							{technology.map((tech) => <li class="work__tag">{tech}</li>)}
						</ul>
						<p class="work__date">
							{
								new Intl.DateTimeFormat("en-GB", {
									month: "long",
									year: "numeric",
								}).format(new Date(date))
							}
						</p>
					</div>
					<div class="work__hero-image-background">
						<div class="work__hero-image">
							<WorkImage
								src={image.url}
								width={image.width}
								height={image.height}
								alt={image.alt}
								sizes="(min-width: 50rem) 50rem, 100vw"
							/>
						</div>
					</div>
					<Content />
				</div>
			</Window>
		</div>
		<div class="layout__cell work__other">
			<Window
				title="Other projects"
				style="--width: 100%"
				titleTag="h2"
				order={1}
				flex
				client:load>
				<Work work={work.otherProjects} />
			</Window>
		</div>
	</div>
</Layout>

<style lang="scss">
	.work__content {
		--text-padding: var(--border-thickness) 0 var(--space-m);
	}

	.work__container {
		--grid: 1fr [inset-start] 1fr 1fr [content-start]min(45%, 33ch) [hero-start]
			min(45%, 33ch) [content-end] 1fr 1fr [inset-end] 1fr;

		display: grid;
		grid-template-columns: var(--grid);

		:global(section) {
			display: contents;
		}

		& > :global(*:not(.breakout)),
		:global(section) > :global(*:not(.breakout)) {
			grid-column: content-start / content-end;
		}

		:global(.breakout) {
			grid-column: 2 /-2;
		}

		.work__hero-image-background {
			display: flex;
			align-items: center;
			grid-column: 2 / -2;
			margin: var(--space-s) 0;
			background-color: var(--background-color);
		}
	}

	.work__hero-main {
		margin-block-start: var(--space-s);
	}

	.work__hero-image {
		display: flex;
		align-items: center;
		max-inline-size: min(90%, 66ch);
		margin: var(--space-s) auto;

		:global(img) {
			display: block;
		}
	}

	.work__title {
		display: block;
		line-height: 1;
		font-size: clamp(3rem, 4vw + 1rem, 4.438rem);
		filter: drop-shadow(0 -0.125rem 0 var(--color-accent-text-1))
			drop-shadow(0.125rem 0.125rem 0 var(--color-accent-text-2));
		background: linear-gradient(
			177deg,
			var(--color-text-heading) 50%,
			var(--color-text-subheading)
		);
		background-clip: text;
		color: transparent;
	}

	.work__excerpt {
		margin-block-start: 0.5rem;
		color: var(--color-text-subheading);
	}

	.work__tags {
		display: flex;
		flex-wrap: wrap;
		gap: 0.25rem;
		margin: var(--space-xs) 0;
		padding: 0;
	}

	.work__tag {
		margin: 0;
		display: inline-block;
		list-style: none;
		background-color: var(--color-card-bg);
		padding: 0 0.5rem;
		color: var(--color-card-text);
	}

	.work__date {
		display: block;
		color: var(--color-text-heading);
		text-transform: uppercase;
	}

	@media (min-width: 48em) {
		.work__container {
			.work__hero-image-background {
				margin: 0 0 var(--space-m) var(--space-s);
				grid-column: hero-start / -1;
			}

			.work__hero-main {
				margin-block-end: var(--space-m);
				align-self: end;
				grid-column: content-start / span 1;
			}
		}
	}

	@media (min-width: 62em) {
		.work {
			grid-template-columns: minmax(66ch, auto) clamp(32ch, 25%, 40ch);
			gap: 1rem;
		}
	}
</style>
